{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactsList/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","onSubmit","e","preventDefault","props","formReset","setState","onChange","currentTarget","value","this","type","pattern","title","required","React","Component","ContactItem","contacts","onDeleteClick","map","id","onClick","ContactsList","Filter","onFilter","App","filter","onDeleteContactClick","prevState","i","onFilterInput","onFilterChange","toLowerCase","includes","onFormSubmit","contact","shortid","generate","some","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65aacadc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'; // ES6\r\n\r\nclass ContactForm extends React.Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired\r\n  }\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state)\r\n    this.formReset()\r\n  }\r\n\r\n  formReset = () => {\r\n    this.setState({name:'', number:''})\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({[e.currentTarget.name]: e.currentTarget.value})\r\n   };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <label >\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.onChange}\r\n            value={name}\r\n  name=\"name\"\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n  required\r\n/>\r\n        </label>\r\n        <label>Number:\r\n          <input\r\n            type=\"tel\"\r\n            value={number}\r\n            onChange={this.onChange}\r\n  name=\"number\"\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n  required\r\n/>\r\n        </label>\r\n        <button type=\"submit\" onSubmit={this.onSubmit}>Add contact</button>\r\n     </form>\r\n    );\r\n  }\r\n}\r\n \r\n\r\n\r\nexport default ContactForm;","import React from 'react'\r\n\r\nconst ContactItem = ({ contacts, onDeleteClick  }) => (\r\n  contacts.map(({id,name, number}) => {\r\n      return (\r\n        <li key={id}>{name}:{number}\r\n          <button onClick={()=>onDeleteClick(id)} type='button'>Delete</button>\r\n        </li>\r\n\r\n      )\r\n    })\r\n    \r\n)\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport ContactItem from './ContactItem';\r\n\r\nconst ContactsList = ({contacts, onDeleteClick}) => \r\n  <ul>\r\n    <ContactItem contacts={contacts} onDeleteClick={onDeleteClick }/>\r\n  </ul>\r\n\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ContactsList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\n\r\nconst Filter = ({value, onFilter}) => {\r\n  return (\r\n    <input type=\"text\" value={value} onChange={ onFilter}/>\r\n  )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onFilter: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Filter","import React from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nclass App extends React.Component {\n  state = {\n  contacts: [{id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},],\n  filter: ''\n}\n  \n\nonDeleteContactClick = (id) => {\n  this.setState(prevState => ({ \n    contacts:  prevState.contacts.filter(i => \n      i.id !== id)\n    }))\n  };\n  \n  onFilterInput = (e) => {\n    const value = e.currentTarget.value\n    this.setState({filter: value})\n  }\n  \n  onFilterChange = () => {\n    const { contacts, filter } = this.state\n    return contacts.filter(i => \n      i.name.toLowerCase().includes(filter.toLowerCase())\n      )\n  };\n  \n  onFormSubmit = ({ name, number }) => {\n    const { contacts } = this.state\n    const contact = {\n      id: shortid.generate(), name, number,\n    };\n    contacts.some(i => \n    i.name === name\n    ) ? alert(`${name} is already in contacts`) : this.setState(({ contacts }) => ({\n          contacts: [contact, ...contacts]\n        }))\n  };\n\n  render() {\n    const contacts = this.onFilterChange()\n    const { filter } = this.state\n    return (\n      <div>\n          <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.onFormSubmit} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onFilter={this.onFilterInput } />\n        <ContactsList contacts={contacts} onDeleteClick={ this.onDeleteContactClick}/>\n      </div>\n  );\n  }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}